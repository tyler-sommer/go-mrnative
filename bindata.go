// Code generated by go-bindata.
// sources:
// tpl/class_template.java.twig
// tpl/init_template.go.twig
// DO NOT EDIT!

// +build !debug

package mrnative

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tplClass_templateJavaTwig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xcd\x8e\xe2\x38\x10\xbe\xf3\x14\xbe\xb4\x08\x2b\xe4\x17\xa0\xb7\xb5\x52\x6b\xa5\xe5\xb0\xdd\xa3\x46\x9a\x39\x8e\x4c\xa8\x0e\x19\x82\x1d\x39\xe5\x34\x88\xe1\xdd\xa7\xec\xd8\x21\x09\x49\x60\x4e\xd3\xb9\x80\xed\xf2\x57\x9f\xeb\xe7\xb3\x73\x11\xef\x44\x02\xec\x74\x62\x3f\x44\x29\xbe\xf8\xe1\xf9\xbc\x98\x4c\xd2\x7d\xae\x34\x32\xa5\x13\x2e\xc8\x6e\x0b\x7c\x2b\x36\x4a\xe5\x3c\x55\xfc\xaf\xc5\xf0\xf2\x5e\xe4\x1a\x36\x26\x06\x4e\xa8\xd5\xe0\x39\x13\x45\xf1\x22\xf6\x6d\x64\xeb\xd1\x82\x2d\x5f\xff\x3d\xc4\x90\x63\xaa\x24\x2d\xe6\x66\x9d\xa5\x31\x8b\xed\x96\xc0\xab\xb9\x7f\xc2\xfc\x07\x07\x04\xb9\x71\x36\xd7\x5e\x1e\x69\x76\x07\xc7\xa5\xfc\x59\xb1\xfa\x8e\xc7\xdc\xce\xcf\xad\x79\x29\x32\x03\xfd\x4b\xb4\xe7\xd5\xe0\xe0\xa6\xeb\xb5\x27\x76\x9a\x38\x4a\xb9\x4e\x4b\x81\xe0\x89\x3f\x2b\x23\x11\x74\x93\x64\xa2\xd6\xa9\xac\x48\xbe\x29\x85\xb4\x97\x7b\x2b\xbe\x42\xb3\x26\x9c\x70\xb2\x00\x35\x16\xdb\xe0\x20\x46\xbd\x98\x5c\xed\xf4\xab\xd1\x9d\x08\xb3\x86\x73\xfb\xe1\x36\x2d\x38\xcd\xb3\xbf\x2b\xfc\x30\x7f\x6e\x78\xaa\xd2\x94\x29\x99\xb0\xaf\x36\x34\x51\x17\x44\x03\x1a\x2d\x6b\x2c\x9e\x00\x7a\xc3\x31\xc0\x52\xa5\x1b\xb6\x0a\xa6\x0e\x5e\xec\x71\x88\x20\x2f\x82\xa5\x35\xba\x89\xbb\x94\xb1\x86\x3d\x48\xbc\x0d\x9c\xd6\xa6\x5d\xe4\x06\x7e\x37\xe7\x14\xcf\x03\xf6\xe4\x1c\x0f\x2e\xed\x36\xe5\x03\xa9\xfe\xc3\x45\xcc\x03\xf7\x18\x0f\xbd\xe5\xe4\x56\xa3\x4f\xc4\x72\x20\x71\x07\x57\xb2\x87\x9b\x95\xf0\x4d\xa7\x08\xd1\x85\x85\x55\x99\xe0\x87\xed\xda\x2c\x5a\x6b\xe5\x95\x63\x7d\xec\xcc\xd8\x8f\x38\xf0\x0f\xe7\x43\xc2\xc7\xe0\x69\xa3\xdd\x6c\xce\xbc\xc1\xc0\xa1\xa3\x72\xd6\xa8\x3e\x77\x22\x16\x0b\x8c\xb7\x2c\xaa\x55\x93\x41\x97\x94\xfd\x56\xc7\x02\x61\xcf\x95\x41\x4e\x79\x94\x98\xc9\x08\xba\x50\x23\x61\x1a\x55\xac\x5a\x60\x56\x48\xd0\x09\x4b\xb4\x32\xf9\x9c\xf9\x91\xa4\xc2\x18\x50\x03\x7b\xd8\xb0\xd7\xc6\x88\x44\x21\x0c\x3d\x86\xdb\x3c\xda\xca\xde\xcb\x0a\x05\x9a\x62\x48\x76\x3c\x78\x30\xba\x47\x72\xbc\xad\x87\x2f\xdc\xa8\x8b\x6e\x61\x8b\xda\xd4\xdb\xf4\x82\x9f\x1e\x58\xfa\xce\x50\x68\x62\xc1\x97\xc5\x9b\x13\x5d\x4d\x74\x1f\xce\x57\xfd\xe5\x6e\x42\x83\x69\xc6\x97\x14\x09\x81\x4a\x3f\x0e\xf6\xce\x13\xa3\xaa\x6a\x69\x7e\xfb\x14\x16\x21\x72\x80\x99\x90\x49\x05\xb8\xce\xe0\x16\x60\x6f\x3f\xd9\x05\x6a\x28\xfb\xe3\xfe\x5b\x66\xe3\xb1\x5c\x2b\x95\x81\x90\xec\x3f\x51\xbc\x58\xc5\x18\xbb\x14\x1c\xec\x36\x18\x8e\xa1\x36\xb8\xb7\x9a\xf1\x3e\x17\xd2\x59\xd9\x6a\x88\xae\x84\xdc\x67\x8a\xf4\x9a\x92\xf5\xd0\x2b\xee\xed\x46\xb0\x6e\xe9\xfd\x92\x2d\x5a\x36\xd7\xf2\x79\x61\xde\x7d\xc0\xb4\x08\x17\x26\x87\x56\x48\x2d\x36\x85\xfc\xe2\x54\xc9\x02\xb5\x89\x29\xf2\x6e\xef\xa2\x49\xf1\x9f\xd7\x12\xb4\x4e\x37\xe0\xc9\x28\x84\x18\x61\x53\xd5\x02\x95\xa9\xc9\x3f\x8f\x64\x57\xbf\x33\xca\x8b\x56\x1f\x05\x6b\x3c\xfa\xe6\x74\x2f\x53\x9e\xb4\xc9\x89\xfb\x45\xd4\x2e\x41\xaa\x64\xbd\x92\x8e\xea\x22\x0a\x68\x63\xd1\x68\xb4\x45\x1d\x84\xff\x01\xb7\x6a\x13\x12\x31\x10\x05\x3b\x39\x1f\xeb\xdf\xbe\x9e\x72\xbf\xa9\xac\x0f\x6e\x8b\x2a\x2b\x80\xac\x87\x8d\x1a\x85\x57\x99\xcc\x3f\xcf\x3b\xc0\x07\xb8\xa3\x09\xbf\x9d\xba\x9a\x39\x6a\x21\x8b\x77\xa5\xf7\xd1\x94\x26\xa6\x73\x36\xdd\x4d\x67\xcd\xe7\xfc\x3d\x7a\x69\xd5\x37\x48\x9c\x3b\x42\xa7\x71\x78\xdd\x36\xed\x44\xd3\x85\x6e\x9f\x0c\x8b\x56\xcb\x57\xd9\x69\x32\x0d\xa1\x6c\x70\x75\x53\x96\x6d\xd9\x66\x7b\xc3\x5b\xd9\xe7\xb0\xad\x31\xe7\x5f\x01\x00\x00\xff\xff\x1e\xe6\xc9\xa3\x7c\x0d\x00\x00")

func tplClass_templateJavaTwigBytes() ([]byte, error) {
	return bindataRead(
		_tplClass_templateJavaTwig,
		"tpl/class_template.java.twig",
	)
}

func tplClass_templateJavaTwig() (*asset, error) {
	bytes, err := tplClass_templateJavaTwigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/class_template.java.twig", size: 3452, mode: os.FileMode(420), modTime: time.Unix(1460757734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tplInit_templateGoTwig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\xe6\x1a\xc8\x85\x7d\x91\xeb\xec\x0d\x04\x6d\x91\x2e\x9a\x45\x13\xa0\x2d\xda\x65\x41\x53\x63\x87\x88\x44\x0a\x7c\xd8\x71\x0d\xfd\x7b\x67\xf8\x90\x2a\x57\x71\x37\xf5\xc2\x71\xe6\x71\x78\xe6\xf0\x68\xd4\x0a\xf9\x2c\x76\x08\xa7\x13\x68\xd1\x20\x74\xdd\x6c\x76\x73\xb3\x33\xeb\x1d\x6a\xb4\xc2\x23\xec\xcc\xff\x8d\xd5\xc2\xab\x3d\xc2\x26\xa8\xba\xe2\x02\xb8\x33\xda\xe3\x8b\x87\xd6\x9a\xbd\xaa\xd0\xc1\x46\x38\x25\x41\x51\xd4\x0a\xe9\x95\xd1\x70\x50\xfe\x09\x3e\x8a\xf6\x13\x56\x41\x22\x48\x13\x38\xe9\x40\xe8\x0a\x9c\x17\x3e\xb8\xd5\xcc\x1f\x5b\xec\xb1\x62\xf3\x56\x50\xed\x69\x06\xf4\x89\xc7\xc4\x26\xb0\xe8\x83\xd5\xd4\xdb\x47\x22\xba\x7f\x22\x7e\x44\x4c\xc3\xce\x9a\xd0\x46\x68\x1e\x63\x15\xfb\x73\xe9\x22\xe6\xae\xd3\x7c\xce\x5b\xa5\x77\xcb\x92\x2b\xe7\x7c\x8e\x7c\xfa\x63\x18\x57\x06\x6b\x51\xfb\x9e\x2a\x57\xa6\xb2\xc5\x32\xc3\xf4\xdd\xe8\x33\x80\x43\x7f\xa1\xbb\x94\x2d\x5c\xae\x4e\x64\x66\x5d\x96\xb4\xcc\xda\x5a\x74\xd4\xcc\xe3\xfe\xa6\x5f\xaf\x59\x2a\x9e\xd0\xec\xab\xa8\x03\x4e\x8e\xb2\x8f\x19\xe7\x8d\xc5\x8a\x3a\x63\xee\xae\xc0\x72\x77\x6c\xa5\xf1\x08\xf5\x97\xd9\x12\x60\x3f\x5a\x42\x99\x6a\x2f\xb5\x0b\x2a\x61\x8c\x65\x01\xb9\xd7\xd2\x62\xc3\x14\x54\xf9\x75\x86\x55\xe6\xd9\x1c\x39\x96\xe0\xfa\xae\x01\xaf\x9b\x9d\xae\x60\x6b\x2c\x44\x11\x98\x03\xfd\x75\x70\xd5\xb1\x80\xe4\x61\xfe\x77\xc5\x5f\xdf\xb3\x9b\x8b\xb7\x46\xa2\xca\x1c\x74\x2d\x4a\xb5\x25\xdb\x7a\x33\xd9\x9c\xb5\xbe\x84\x7b\xae\x7f\x8e\x13\x4b\xb5\x4d\x24\xff\xb9\x85\x79\x23\xda\x16\xed\x9c\x79\x66\x45\x3e\x08\xf7\x90\x78\xe5\x6b\xb2\xac\xc3\x96\x1c\x6c\x48\x17\x5b\x84\x21\xb6\x7b\xa1\x6a\xb1\xa9\xb3\xa7\x73\x1f\xdd\xd1\xc6\x98\xba\xa0\x8d\xa1\x48\x57\xcd\x81\x88\x91\xda\x72\x4f\x99\x24\x66\xee\x35\xcd\x41\x44\x51\x57\x74\xf0\x40\xed\x9b\x55\xf4\xd8\x1f\xf8\xdb\x81\xd1\x08\xb5\xa2\x2f\x92\x28\x5a\x29\xcd\x97\x50\x63\xe5\xe2\x19\x8f\x3d\x30\xfd\x7e\x0c\x9e\x70\xaf\xf9\xf4\xf1\x79\x29\x51\xdc\x3e\x25\x6a\x9c\x77\x94\x89\x97\x40\xd5\x6f\x29\xb8\x18\xa2\xb7\xa4\xa9\x34\xcd\x86\x88\xd9\xf9\x12\xde\xc0\xdc\xc6\x87\x84\x24\x5e\x8f\x9a\x5f\xbf\x40\x7e\xf8\x82\xf4\x70\x4a\x74\x1e\xf0\x30\x59\x45\x0e\x14\xac\x83\x20\x49\x0f\x93\x40\xd7\x24\xbc\xa8\x8e\xd1\x95\xc1\x91\xde\xdb\xa0\xe5\x6b\x78\x74\x07\xff\x4d\x9e\x93\xdc\x93\xae\x10\xfe\x9d\x2a\x21\xa2\x44\x75\x30\xd6\xa0\xc4\xe0\x2e\x1a\x84\x16\x06\x78\xf1\x9c\xaf\x8e\xee\xe3\x26\x59\xa9\x15\xca\xc6\xfd\x28\x2e\xf9\x99\xc5\x66\x39\xde\x41\x02\x05\x1e\x26\x6e\xf3\x46\x1c\x93\x27\xe0\x07\x5a\x03\x34\x6c\x43\x6b\xe4\xec\x00\x57\x6c\x62\x82\x6f\x83\x67\xa4\xe0\x68\xc5\xc5\x58\x7e\x55\x54\x83\x87\xa2\x52\x0b\x33\x2d\xc9\x92\x47\x39\x37\x57\xf4\xec\x84\xb7\x72\x5c\xfa\x97\x4b\xd3\x2d\x87\x25\xf9\xe5\xf1\xfd\xe3\x1a\xee\x9b\xb6\x8e\x1b\x46\xf0\x8c\xc9\xd4\x84\xb1\xea\x8d\x1d\x8f\xca\x6b\x07\x6b\x87\x49\xe3\xbc\x91\x47\x32\x27\x6d\xeb\x3a\x3d\x75\x64\x18\xe7\x8c\x54\xe4\x9d\xaa\xbc\xaa\x84\xe7\xba\x41\xe1\x6c\xd9\xb1\xc4\x16\x25\xf2\x9b\xb6\x09\xb5\x57\x44\xae\xc0\xed\x95\x18\x8b\x38\xbd\xaf\xfe\xa0\x68\x22\xfe\x8a\xa8\x7f\x43\x3c\x7e\x08\x58\xc0\x61\x4d\xa5\x26\xfe\xec\x61\x7d\x1b\x93\x29\xd3\xc7\xcf\x05\x4f\x99\x2e\x8b\x9e\x97\x53\xfa\xc9\xf0\x57\xdd\xcf\x00\x00\x00\xff\xff\x7a\xb6\x72\xd2\xb4\x08\x00\x00")

func tplInit_templateGoTwigBytes() ([]byte, error) {
	return bindataRead(
		_tplInit_templateGoTwig,
		"tpl/init_template.go.twig",
	)
}

func tplInit_templateGoTwig() (*asset, error) {
	bytes, err := tplInit_templateGoTwigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tpl/init_template.go.twig", size: 2228, mode: os.FileMode(420), modTime: time.Unix(1461078756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tpl/class_template.java.twig": tplClass_templateJavaTwig,
	"tpl/init_template.go.twig":    tplInit_templateGoTwig,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tpl": &bintree{nil, map[string]*bintree{
		"class_template.java.twig": &bintree{tplClass_templateJavaTwig, map[string]*bintree{}},
		"init_template.go.twig":    &bintree{tplInit_templateGoTwig, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
